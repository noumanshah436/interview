/*
~ Author    : leetcode.com/tridib_2003/
~ Problem   : 442. Find All Duplicates in an Array
~ Link      : https://leetcode.com/problems/find-all-duplicates-in-an-array/


     https://www.youtube.com/watch?v=8ci8WfQ6cns


Given an integer array nums of length n where all the integers of nums are in the range [1, n] and 
each integer appears once or twice, return an array of all the integers that appears twice.

You must write an algorithm that runs in O(n) time and uses only constant extra space. 

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [2,3]
Example 2:

Input: nums = [1,1,2]
Output: [1]

*/

class Solution {
public:
    vector<int> findDuplicates(vector<int> & nums) {
        
        vector<int> duplicates;

        if (!nums.size())
            return duplicates;

        for (int n :nums) {
            n = abs(n);        
            if (nums[n - 1] < 0)     
                duplicates.push_back(n);
            else
               nums[n-1] *= -1;
        }
        return duplicates;
    }
};

As we have only numbers 1 to n in an array of size n.
We will iterate through each element and make the element at that index negative.
Now if we find that element negative again, that means this element is duplicate.