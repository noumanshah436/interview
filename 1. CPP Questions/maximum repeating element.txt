// C++ program to find the maximum repeating number
// https://www.geeksforgeeks.org/find-the-maximum-repeating-number-in-ok-time/

***************************

Given an array of size n, the array contains numbers in range from 0 to k-1 where k is a positive integer and k <= n.
 Find the maximum repeating number in this array. 

For example, let k be 10 the given array be arr[] = {1, 2, 2, 2, 0, 2, 0, 2, 3, 8, 0, 9, 2, 3}, 
the maximum repeating number would be 2. Expected time complexity is O(n) and extra space allowed is O(1). Modifications to array are allowed. 

 


*************************
see link for explanation first:


#include<iostream>
using namespace std;

// Returns maximum repeating element in arr[0..n-1].
// The array elements are in range from 0 to k-1
int maxRepeating(int* arr, int n, int k)
{
	// Iterate though input array, for every element
	// arr[i], increment arr[arr[i]%k] by k

	for (int i = 0; i < n; i++)
		arr[arr[i] % k] += k;


	// Find index of the maximum repeating element
	int max = arr[0], result = 0;
	for (int i = 1; i < n; i++)
	{
		if (arr[i] > max)
		{
			max = arr[i];
			result = i;
		}
	}

	/* Uncomment this code to get the original array back
	for (int i = 0; i< n; i++)
		arr[i] = arr[i]%k; */

	// Return index of the maximum element
	return result;
}

// Driver program to test above function
int main()
{
	int arr[] = { 2, 3, 3, 5, 3, 4, 1, 7 };
	int n = sizeof(arr) / sizeof(arr[0]);
	int k = 8;

	cout << "The maximum repeating number is " <<
		maxRepeating(arr, n, k) << endl;

	return 0;
}


*************************************************


Following is the O(n) time and O(1) extra space approach. 

Let us understand the approach with a simple example where 
arr[] = {2, 3, 3, 5, 3, 4, 1, 7}, k = 8, n = 8 (number of elements in arr[]).

1) Iterate though input array arr[], for every element arr[i], increment arr[arr[i]%k] by k (arr[] becomes {2, 11, 11, 29, 11, 12, 1, 15 })
2) Find the maximum value in the modified array (maximum value is 29). Index of the maximum value is the maximum repeating element (index of 29 is 3).
3) If we want to get the original array back, we can iterate through the array one more time and do arr[i] = arr[i] % k where i varies from 0 to n-1.